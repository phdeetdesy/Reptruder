/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package burp;

import java.awt.Color;
import java.awt.Frame;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.event.ComponentListener;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.io.UnsupportedEncodingException;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;

/**
 * 自動インターセプトの条件設定画面
 */
public class AutoInterceptSetting extends javax.swing.JDialog implements WindowListener {

    private final FramePopup parent;
    private final Frame parentFrame;
    private ITextEditor requestViewer;
    private final AutoInterceptConditions condSetting;
    
    /**
     * Creates new form AutoInterceptSetting
     */
    public AutoInterceptSetting(Frame parentFrame, FramePopup parent, IBurpExtenderCallbacks callbacks, boolean modal) {
        super(parentFrame, modal);
        initComponents();
        
        addBurpComponents(callbacks);
        
        this.parent = parent;
        this.parentFrame = parentFrame;
        condSetting = new AutoInterceptConditions(parentFrame, callbacks.getHelpers());
    }
    
    /*
        条件設定クラスを返却
    */
    public AutoInterceptConditions getConditions() {
        return condSetting;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jTextField4 = new javax.swing.JTextField();
        jComboBox2 = new javax.swing.JComboBox();
        jTextField3 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jTextField5 = new javax.swing.JTextField();
        jTextField6 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jComboBox3 = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        jTextField7 = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jComboBox6 = new javax.swing.JComboBox();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jLabelResult1 = new javax.swing.JLabel();
        jLabelResult2 = new javax.swing.JLabel();
        jLabelResult3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("条件1");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "PARAM", "URL", "ALL" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField2ActionPerformed(evt);
            }
        });

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "PARAM", "URL", "ALL" }));
        jComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox2ActionPerformed(evt);
            }
        });

        jTextField3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField3ActionPerformed(evt);
            }
        });

        jLabel2.setText("条件2");

        jLabel3.setText("条件3");

        jComboBox3.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "PARAM", "URL", "ALL" }));
        jComboBox3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox3ActionPerformed(evt);
            }
        });

        jLabel6.setText("間隔");

        jLabel7.setText("文字コード");
        jLabel7.setName(""); // NOI18N

        jComboBox6.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "utf-8", "shift_jis", "euc_jp", "ISO2022JP", "Windows-31J" }));
        jComboBox6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox6ActionPerformed(evt);
            }
        });

        jButton1.setText("save");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("clear");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("test");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabelResult1.setText("*");

        jLabelResult2.setText("*");

        jLabelResult3.setText("*");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField5))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField3))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextField4)
                            .addComponent(jTextField2)
                            .addComponent(jTextField6)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(20, 20, 20)
                        .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(39, 39, 39)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBox6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 237, Short.MAX_VALUE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabelResult1, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabelResult2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabelResult3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelResult1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelResult2, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelResult3, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(jComboBox6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 235, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addContainerGap())
        );

        jComboBox1.getAccessibleContext().setAccessibleName("condType1");
        jTextField1.getAccessibleContext().setAccessibleName("condName1");
        jTextField2.getAccessibleContext().setAccessibleName("condVal1");
        jTextField4.getAccessibleContext().setAccessibleName("condVal2");
        jComboBox2.getAccessibleContext().setAccessibleName("condType2");
        jTextField3.getAccessibleContext().setAccessibleName("condName2");
        jTextField5.getAccessibleContext().setAccessibleName("condName3");
        jTextField6.getAccessibleContext().setAccessibleName("condVal3");
        jComboBox3.getAccessibleContext().setAccessibleName("condType3");
        jTextField7.getAccessibleContext().setAccessibleName("interval");
        jComboBox6.getAccessibleContext().setAccessibleName("encoding");
        jButton1.getAccessibleContext().setAccessibleName("saveBtn");
        jButton2.getAccessibleContext().setAccessibleName("clearBtn");
        jButton3.getAccessibleContext().setAccessibleName("testBtn");
        jTabbedPane1.getAccessibleContext().setAccessibleName("tabPane");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /*
        burpTextEditorを設定
    */
    private void addBurpComponents(IBurpExtenderCallbacks callbacks) {
        
        requestViewer = callbacks.createTextEditor();
        requestViewer.setEditable(false);
        this.jTabbedPane1.addTab("Request", requestViewer.getComponent());
    }

    /*
        初期処理：再表示時のイベント登録
    */
    public void init() {
//        this.addComponentListener(this);
        this.addWindowListener(this);
    }
    
    /*
        再表示時に保存している値を表示
    */
    private void reviewConditions() {

        this.clearInputArea();
        
        List<InterceptCondition> conds = this.condSetting.getConditions();
        if (conds.size() > 0) {
            InterceptCondition cond = conds.get(0);
            jComboBox1.setSelectedIndex(cond.type);
            jTextField1.setText(cond.name);
            jTextField2.setText(cond.value);
            
            if (conds.size() > 1) {
                InterceptCondition cond2 = conds.get(1);
                jComboBox2.setSelectedIndex(cond2.type);
                jTextField3.setText(cond2.name);
                jTextField4.setText(cond2.value);
            }
            
            if (conds.size() > 2) {
                InterceptCondition cond3 = conds.get(2);
                jComboBox3.setSelectedIndex(cond3.type);
                jTextField5.setText(cond3.name);
                jTextField6.setText(cond3.value);
            }
        }
        
        jTextField7.setText(String.valueOf(this.condSetting.getInterval()));
    }
    
    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed
    /*
        条件タイプ選択1
    */
    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        String typestr = String.valueOf(jComboBox1.getSelectedItem());
        int type = InterceptCondition.checkType(typestr);
        if (type == InterceptCondition.TYPE_URL || type == InterceptCondition.TYPE_ALL) {
            jTextField1.setEditable(false);
            jTextField1.setBackground(Color.LIGHT_GRAY);
        } else {
            jTextField1.setEditable(true);
            jTextField1.setBackground(Color.WHITE);
        }
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jTextField3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField3ActionPerformed

    private void jTextField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField2ActionPerformed

    /*
        文字コード選択
    */
    private void jComboBox6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox6ActionPerformed
        try {
            String encoding = String.valueOf(jComboBox6.getSelectedItem());
            this.condSetting.encoding = encoding;
            
            byte[] bytes = requestViewer.getText();
            byte[] encbytes = (new String(bytes, encoding)).getBytes();
            requestViewer.setText(encbytes);
            
            this.validate();
            this.repaint();
        } catch(Exception ex) {
            JOptionPane.showMessageDialog(this.parentFrame, ex.getMessage());
        }
                    
    }//GEN-LAST:event_jComboBox6ActionPerformed

    /*
        条件タイプ選択2
    */
    private void jComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox2ActionPerformed
        String typestr = String.valueOf(jComboBox2.getSelectedItem());
        int type = InterceptCondition.checkType(typestr);
        if (type == InterceptCondition.TYPE_URL || type == InterceptCondition.TYPE_ALL) {
            jTextField3.setEditable(false);
            jTextField3.setBackground(Color.LIGHT_GRAY);
        } else {
            jTextField3.setEditable(true);
            jTextField3.setBackground(Color.WHITE);
        }
    }//GEN-LAST:event_jComboBox2ActionPerformed

    /*
        条件タイプ選択3
    */
    private void jComboBox3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox3ActionPerformed
        String typestr = String.valueOf(jComboBox3.getSelectedItem());
        int type = InterceptCondition.checkType(typestr);
        if (type == InterceptCondition.TYPE_URL || type == InterceptCondition.TYPE_ALL) {
            jTextField5.setEditable(false);
            jTextField5.setBackground(Color.LIGHT_GRAY);
        } else {
            jTextField5.setEditable(true);
            jTextField5.setBackground(Color.WHITE);
        }
    }//GEN-LAST:event_jComboBox3ActionPerformed

    /*
        testボタン
    */
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // 条件1
        int type1 = InterceptCondition.checkType(String.valueOf(jComboBox1.getSelectedItem()));
        String name1 = jTextField1.getText();
        String value1 = jTextField2.getText();
        condSetting.addCondition(type1, name1, value1);
        boolean result1 = condSetting.testCondition(type1, name1, value1);
        if (result1 == true) {
            jLabelResult1.setText("o");
        } else {
            jLabelResult1.setText("x");
        }

        // 条件2
        int type2 = InterceptCondition.checkType(String.valueOf(jComboBox2.getSelectedItem()));
        String name2 = jTextField3.getText();
        String value2 = jTextField4.getText();
        condSetting.addCondition(type2, name2, value2);
        boolean result2 = condSetting.testCondition(type2, name2, value2);
        if (result2 == true) {
            jLabelResult2.setText("o");
        } else {
            jLabelResult2.setText("x");
        }

        // 条件3
        int type3 = InterceptCondition.checkType(String.valueOf(jComboBox3.getSelectedItem()));
        String name3 = jTextField5.getText();
        String value3 = jTextField6.getText();
        condSetting.addCondition(type3, name3, value3);
        boolean result3 = condSetting.testCondition(type3, name3, value3);
        if (result3 == true) {
            jLabelResult3.setText("o");
        } else {
            jLabelResult3.setText("x");
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    /*
        saveボタン
    */
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        this.saveEachCondition();
        this.setVisible(false);
    }//GEN-LAST:event_jButton1ActionPerformed

    /*
        clearボタン
    */
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        condSetting.clearConditions();
        this.clearInputArea();
    }//GEN-LAST:event_jButton2ActionPerformed

    /*
        入力欄初期化
    */
    private void clearInputArea() {
        
        // 入力欄初期化
        jComboBox1.setSelectedIndex(0);
        jTextField1.setText(null);
        jTextField2.setText(null);
        jComboBox2.setSelectedIndex(0);
        jTextField3.setText(null);
        jTextField4.setText(null);
        jComboBox3.setSelectedIndex(0);
        jTextField5.setText(null);
        jTextField6.setText(null);
        jTextField7.setText(null);
        jLabelResult1.setText("*");
        jLabelResult2.setText("*");
        jLabelResult3.setText("*");
    }
    /*
        入力された条件を保持
    */
    private void saveEachCondition() {
        
        this.condSetting.clearConditions();
        
        // 条件1
        int type1 = InterceptCondition.checkType(String.valueOf(jComboBox1.getSelectedItem()));
        String name1 = jTextField1.getText();
        String value1 = jTextField2.getText();
        if (name1.length() > 0 || value1.length() > 0) {
            condSetting.addCondition(type1, name1, value1);
        }

        // 条件2
        int type2 = InterceptCondition.checkType(String.valueOf(jComboBox2.getSelectedItem()));
        String name2 = jTextField3.getText();
        String value2 = jTextField4.getText();
        if (name2.length() > 0 || value2.length() > 0) {
            condSetting.addCondition(type2, name2, value2);
        }

        // 条件3
        int type3 = InterceptCondition.checkType(String.valueOf(jComboBox3.getSelectedItem()));
        String name3 = jTextField5.getText();
        String value3 = jTextField6.getText();
        if (name3.length() > 0 || value3.length() > 0) {
            condSetting.addCondition(type3, name3, value3);
        }
        
        // 間隔
        try {
            String interval = jTextField7.getText();
            condSetting.setInterval(Integer.parseInt(interval));
        } catch(Exception ex) {
            // TODO
        }
    }
    
    /*
        テスト用ログを表示
    */
    public void visibleTestMessage() {
        IHttpRequestResponse message = condSetting.getTestMessage();
        if (message != null) {
            this.requestViewer.setText(message.getRequest());
        }
    }
    
    public boolean checkCondition(IHttpRequestResponse message) {
        return this.condSetting.checkCondition(message);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JComboBox jComboBox2;
    private javax.swing.JComboBox jComboBox3;
    private javax.swing.JComboBox jComboBox6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabelResult1;
    private javax.swing.JLabel jLabelResult2;
    private javax.swing.JLabel jLabelResult3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JTextField jTextField7;
    // End of variables declaration//GEN-END:variables


    @Override
    public void windowOpened(WindowEvent e) {
    }

    @Override
    public void windowClosing(WindowEvent e) {
    }

    @Override
    public void windowClosed(WindowEvent e) {
    }

    @Override
    public void windowIconified(WindowEvent e) {
    }

    @Override
    public void windowDeiconified(WindowEvent e) {
    }

    @Override
    public void windowActivated(WindowEvent e) {
        this.reviewConditions();
    }

    @Override
    public void windowDeactivated(WindowEvent e) {
        List<InterceptCondition> conds = this.condSetting.getConditions();
        if (conds == null || conds.isEmpty() == true) {
            this.parent.uncheckAutoIntercept();
        }
    }
}


/*
    自動インターセプトの設定や処理を行う
*/
class AutoInterceptConditions {

    private Frame baseFrame;
    private IExtensionHelpers helpers = null;
    private List<InterceptCondition> conditions = new ArrayList<>();
    private IHttpRequestResponse testMessage;
    private int counter = 0;
    private int interval = 0;

    public String encoding = "utf-8";
    
    /*
        コンストラクタ
    */
    public AutoInterceptConditions(Frame bs, IExtensionHelpers h) {
        baseFrame = bs;
        this.helpers = h;
    }
    
    /*
        条件リストをクリア
    */
    public void clearConditions() {
        this.conditions.clear();
        this.interval = 0;
        this.counter = 0;
    }
    
    /*
        条件リストに追加
    */
    public void addCondition(int type, String name, String value) {
        InterceptCondition cond = new InterceptCondition(type, name, value);
        conditions.add(cond);
    }
    
    /*
        テスト用リクエストを保持
    */
    public void setTestMessage(IHttpRequestResponse tm) {
        this.testMessage = tm;
    }
    
    /*
        テスト用リクエストを取得
    */
    public IHttpRequestResponse getTestMessage() {
        return this.testMessage;
    }
    
    /*
        条件リストを返却
    */
    public List<InterceptCondition> getConditions() {
        return this.conditions;
    }

    /*
        試してみる
    */
    public boolean testCondition(int type, String name, String value) {
        boolean ret = false;
        
        if (this.testMessage != null) {
            InterceptCondition testcond = new InterceptCondition(type, name, value);
            ret = testcond.checkCondition(this.helpers, this.testMessage, this.encoding);
            
            String errmsg = testcond.getErrorMessage();
            if (errmsg != null && errmsg.length() > 0) {
                JOptionPane.showMessageDialog(this.baseFrame, errmsg);
                ret = false;
            }
        }
        
        return ret;
    }
    
    /*
        プロキシとしてチェック
    */
    public boolean checkCondition(IHttpRequestResponse message) {
        boolean ret = false;
        
        if (this.conditions.size() > 0) {
            int c = this.conditions.size();
            for (InterceptCondition cond : this.conditions) {
                boolean tempret = cond.checkCondition(this.helpers, message, this.encoding);
                if (tempret == true) {
                    c -= 1;
                }
            }
            if (c <= 0) {
                ret = true;
            }
        }
        
        // 間隔をチェック
        if (ret == true) {
            this.counter -= 1;
            if (this.counter > 0) {
                ret = false;
            } else {
                this.counter = this.interval;
            }
        }
        
        return ret;
    }
    
    /*
        間隔の設定値を返却
    */
    public int getInterval() {
        this.counter = this.interval;
        return this.interval;
    }
    
    /*
        間隔の値を設定
    */
    public void setInterval(int i) {
        this.counter = i;
        this.interval = i;
    }
}

/*
    各々の条件
*/
class InterceptCondition {
    public static int TYPE_PARAM = 0;
    public static int TYPE_URL = 1;
    public static int TYPE_ALL = 2;

    public int type = -1;
    public String name = "";
    public String value = "";
    
    private String errorMsg;
    
    /*
        コンストラクタ
    */
    public InterceptCondition(int t, String n, String v) {
        this.type = t;
        this.name = n;
        this.value = v;
    }
    
    /*
        リクエストが条件を満たすか
    */
    public boolean checkCondition(IExtensionHelpers helpers, IHttpRequestResponse message, String encoding) {
        boolean ret = false;
        
        if (this.type == TYPE_URL) {
            if (this.value != null && this.value.length() > 0) {
                ret = this.checkUrlCondition(helpers, message);
            }
        } else if (this.type == TYPE_PARAM) {
            if (this.name != null && this.name.length() > 0 &&
                this.value != null && this.value.length() > 0) {
                ret = this.checkParamCondition(helpers, message);
            }
        } else if (this.type == TYPE_ALL) {
            if (this.value != null && this.value.length() > 0) {
                ret = this.checkALLCondition(message, encoding);
            }
        }
        
        return ret;
    }

    /*
        パラメータをチェック
    */
    private boolean checkParamCondition(IExtensionHelpers helpers, IHttpRequestResponse message) {
        boolean ret = false;
        
        IRequestInfo reqinfo = helpers.analyzeRequest(message);
        List<IParameter> params = reqinfo.getParameters();
        Pattern pname = Pattern.compile(this.name);
        Pattern pval = Pattern.compile(this.value);
        for (IParameter param : params) {
            // パラメータ名チェック
            String pn = param.getName();
            Matcher mpn = pname.matcher(pn);
            if (mpn.find() == true) {
                // 値をチェック
                String pv = param.getValue();
                Matcher mpv = pval.matcher(pv);
                if (mpv.find() == true) {
                    ret = true;
                    break;
                }
            }
        }
        
        return ret;
    }
    
    /*
        URLをチェック
    */
    private boolean checkUrlCondition(IExtensionHelpers helpers, IHttpRequestResponse message) {
        boolean ret = false;
        
        URL tempurl = helpers.analyzeRequest(message).getUrl();
        IHttpService ms = message.getHttpService();
        String fullurl = ms.getProtocol() + "://" + ms.getHost() + ":" + ms.getPort()
                        + tempurl.getFile();
        fullurl = fullurl.replaceAll("\\?.*$", "");
        
        Pattern pval = Pattern.compile(this.value);
        Matcher mreq = pval.matcher(fullurl);
        if (mreq.find() == true) {
            ret = true;
        }
        
        return ret;
    }
    
    /*
        HTTPリクエスト全体をチェック
    */
    private boolean checkALLCondition(IHttpRequestResponse message, String encoding) {
        boolean ret = false;

        try {
            byte[] reqbytes = message.getRequest();
            String reqstr = PublicTool.changeEncodingToString(reqbytes, encoding);

            Pattern pval = Pattern.compile(this.value);
            Matcher mreq = pval.matcher(reqstr);
            if (mreq.find() == true) {
                ret = true;
            }
        } catch (Exception ex) {
            errorMsg = ex.getMessage();
        }
        
        return ret;
    }
    
    /*
        エラーメッセージを返却後、nullを設定
    */
    public String getErrorMessage() {
        String temp = this.errorMsg;
        this.errorMsg = null;
        return temp;
    }
    
    /*
        文字列からタイプを取得
    */
    public static int checkType(String typestr) {
        int ret = -1;
        
        if (typestr.equals("URL") == true) {
            ret = TYPE_URL;
        } else if (typestr.equals("PARAM") == true) {
            ret = TYPE_PARAM;
        } else if (typestr.equals("ALL") == true) {
            ret = TYPE_ALL;
        }
        
        return ret;
    }

}


class PublicTool {
    /*
        byte配列から文字コードを指定してStringへ変換
    */
    public static String changeEncodingToString(byte[] bytes, String encoding) throws UnsupportedEncodingException {
        return new String(bytes, encoding);
    }
    
    /*
        byte配列から文字コードを指定してbyte配列へ変換
    */
    public static byte[] changeEncodingToBytes(byte[] bytes, String encoding) throws UnsupportedEncodingException {
        return (new String(bytes, encoding)).getBytes();
    }
    
}

