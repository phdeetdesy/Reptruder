/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package burp;

import java.awt.Frame;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.net.URLEncoder;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;

/**
 *
 * @author akurosu
 */
public class PreviousProcess extends javax.swing.JDialog implements WindowListener {
    
    RequestTable parentTable;
    BurpExtender parent;
    
    RequestEntry targetEntry;
    ResponseListInfo resListInfo;
    int rowNum;
    
    String charset = "utf-8";

    /**
     * Creates new form PreviousProcess
     */
    public PreviousProcess(RequestTable parentTable, boolean modal, BurpExtender prt, RequestEntry te, ResponseListInfo rli, int row, String cs) {
        super((Frame)parentTable.baseFrame, modal);
        initComponents();
        
        this.parentTable = parentTable;
        this.parent = prt;
        this.targetEntry = te;
        
        this.updateUI(rli, row, cs);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jSplitPane1 = new javax.swing.JSplitPane();
        jSplitPane2 = new javax.swing.JSplitPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        processTable = new javax.swing.JTable();
        jSplitPane3 = new javax.swing.JSplitPane();
        jPanel2 = new javax.swing.JPanel();
        requestCombo = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        responseCombo = new javax.swing.JComboBox();
        inputRadio = new javax.swing.JRadioButton();
        regexpRadio = new javax.swing.JRadioButton();
        ListRadio = new javax.swing.JRadioButton();
        resInputParamCombo = new javax.swing.JComboBox();
        resRegexpText = new javax.swing.JTextField();
        resRegexpTestBtn = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        resListText = new javax.swing.JTextArea();
        resRegexpNumText = new javax.swing.JTextField();
        inputPatamValueText = new javax.swing.JTextField();
        urlEncodeCheck = new javax.swing.JCheckBox();
        charsetForEncode = new javax.swing.JComboBox();
        jPanel1 = new javax.swing.JPanel();
        deleteBtn = new javax.swing.JButton();
        newBtn = new javax.swing.JButton();
        addBtn = new javax.swing.JButton();
        saveBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jSplitPane1.setDividerLocation(620);

        jSplitPane2.setDividerLocation(150);
        jSplitPane2.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        processTable.setModel(new ProcessDataModel(
            new Object [][] {
            },
            new String [] {
                "#", "replaced", "type"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(processTable);
        if (processTable.getColumnModel().getColumnCount() > 0) {
            processTable.getColumnModel().getColumn(0).setMinWidth(30);
            processTable.getColumnModel().getColumn(0).setMaxWidth(30);
        }

        jSplitPane2.setTopComponent(jScrollPane1);

        jSplitPane3.setDividerLocation(50);
        jSplitPane3.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        requestCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "sample1", "sample2", "sample3" }));

        jLabel1.setText("target parameter");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(requestCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(372, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(requestCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jSplitPane3.setTopComponent(jPanel2);

        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel2.setText("response");

        responseCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "res1", "res2", "res3" }));
        responseCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                responseComboActionPerformed(evt);
            }
        });

        buttonGroup1.add(inputRadio);
        inputRadio.setText("input");

        buttonGroup1.add(regexpRadio);
        regexpRadio.setText("RegExp");

        buttonGroup1.add(ListRadio);
        ListRadio.setText("List");

        resInputParamCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "input1", "input2", "input3" }));
        resInputParamCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resInputParamComboActionPerformed(evt);
            }
        });

        resRegexpTestBtn.setText("test");
        resRegexpTestBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resRegexpTestBtnActionPerformed(evt);
            }
        });

        resListText.setColumns(5);
        resListText.setRows(3);
        jScrollPane2.setViewportView(resListText);

        resRegexpNumText.setText("1");

        inputPatamValueText.setEditable(false);
        inputPatamValueText.setBackground(new java.awt.Color(197, 193, 179));
        inputPatamValueText.setText("jTextField1");

        urlEncodeCheck.setText("Url Encode");

        charsetForEncode.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "utf-8", "shift_jis", "euc_jp", "ISO2022JP", "Windows-31" }));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(responseCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(jPanel3Layout.createSequentialGroup()
                            .addComponent(inputRadio)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(resInputParamCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(inputPatamValueText))
                        .addGroup(jPanel3Layout.createSequentialGroup()
                            .addComponent(regexpRadio)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(resRegexpNumText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(jPanel3Layout.createSequentialGroup()
                                    .addComponent(resRegexpText, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(resRegexpTestBtn)))))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(ListRadio)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(charsetForEncode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(urlEncodeCheck)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(inputRadio)
                        .addComponent(resInputParamCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(inputPatamValueText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(responseCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(15, 15, 15)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(regexpRadio)
                    .addComponent(resRegexpText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(resRegexpTestBtn))
                .addGap(5, 5, 5)
                .addComponent(resRegexpNumText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ListRadio)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 168, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(urlEncodeCheck)
                    .addComponent(charsetForEncode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jSplitPane3.setRightComponent(jPanel3);

        jSplitPane2.setRightComponent(jSplitPane3);

        jSplitPane1.setLeftComponent(jSplitPane2);

        deleteBtn.setText("delete");
        deleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBtnActionPerformed(evt);
            }
        });

        newBtn.setText("new");
        newBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newBtnActionPerformed(evt);
            }
        });

        addBtn.setText("add");
        addBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBtnActionPerformed(evt);
            }
        });

        saveBtn.setText("save");
        saveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(newBtn)
                    .addComponent(deleteBtn)
                    .addComponent(addBtn)
                    .addComponent(saveBtn))
                .addContainerGap(22, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(52, 52, 52)
                .addComponent(deleteBtn)
                .addGap(220, 220, 220)
                .addComponent(newBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(addBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 88, Short.MAX_VALUE)
                .addComponent(saveBtn)
                .addContainerGap())
        );

        jSplitPane1.setRightComponent(jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 718, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 500, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void responseComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_responseComboActionPerformed

        ResponseInfo selectedResInfo = (ResponseInfo)this.responseCombo.getSelectedItem();

        this.resInputParamCombo.removeAllItems();
        
        if (selectedResInfo != null) {
            for (ReqResParameter param: selectedResInfo.getresponseParamList()) {
                this.resInputParamCombo.addItem(param);
            }
        }
    }//GEN-LAST:event_responseComboActionPerformed

    private void resInputParamComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resInputParamComboActionPerformed
        ReqResParameter selectedParam = (ReqResParameter)this.resInputParamCombo.getSelectedItem();
        
        if (selectedParam != null) {
            this.inputPatamValueText.setText(selectedParam.getValue());
        } else {
            this.inputPatamValueText.setText(null);
        }
    }//GEN-LAST:event_resInputParamComboActionPerformed

    private void resRegexpTestBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resRegexpTestBtnActionPerformed
        String regexpText = this.resRegexpText.getText();
        int regexpNum = Integer.valueOf(this.resRegexpNumText.getText());
        
        if (regexpNum < 0 || regexpNum > 100) {
            return;
        }
        
        ResponseInfo selectedResInfo = (ResponseInfo)this.responseCombo.getSelectedItem();
        String resHtml = ResponseListInfo.rebytes2string(this.parent, selectedResInfo.responseBytes, this.charset);

        String matchText = "no match";
        Pattern pat = Pattern.compile(regexpText, Pattern.CASE_INSENSITIVE | Pattern.MULTILINE);
        Matcher mat = pat.matcher(resHtml);
        while (regexpNum > 0) {
            if (mat.find() == true) {
                try {
                    matchText = mat.group(1);
                } catch (Exception e) {
                    break;
                }
            }
            regexpNum--;
        }
        
        JOptionPane.showMessageDialog((Frame)this.getParent(), matchText);
    }//GEN-LAST:event_resRegexpTestBtnActionPerformed

    /*
     addボタン
    */
    private void addBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBtnActionPerformed

        PreviousProcessInfo processInfo;
        
        ReqResParameter targetparam = (ReqResParameter)this.requestCombo.getSelectedItem();
        int counter = ((ProcessDataModel)this.processTable.getModel()).getNextNumber();
        ResponseInfo targetResponseInfo = (ResponseInfo)this.responseCombo.getSelectedItem();
        
        if (targetparam == null) {
            return;
        }
        
        if (this.inputRadio.isSelected()) {
            ReqResParameter param = (ReqResParameter)this.resInputParamCombo.getSelectedItem();
            
            processInfo = new PreviousProcessInfo(parent, targetResponseInfo, PreviousProcessInfo.TYPE_PARAM_INPUT, targetparam, counter, this.charset);
            processInfo.setProcessInfo(param, null);
        } else if (this.regexpRadio.isSelected()) {
            String regexpText = this.resRegexpText.getText();
            int regexpNum = Integer.valueOf(this.resRegexpNumText.getText());
            
            processInfo = new PreviousProcessInfo(parent, targetResponseInfo, PreviousProcessInfo.TYPE_PARAM_REGEXP, targetparam, counter, this.charset);
            processInfo.setProcessInfo(regexpText, regexpNum);
        } else if (this.ListRadio.isSelected()) {
            String listString = this.resListText.getText();
            
            processInfo = new PreviousProcessInfo(parent, targetResponseInfo, PreviousProcessInfo.TYPE_PARAM_LIST, targetparam, counter, this.charset);
            processInfo.setProcessInfo(listString, null);
        } else {
            return;
        }
        
        processInfo.isUrlEncode = this.urlEncodeCheck.isSelected();
        processInfo.charsetForUrlEncode = (String)this.charsetForEncode.getSelectedItem();
        
        ((ProcessDataModel)this.processTable.getModel()).addProcess(processInfo);
        
        // リストを選択した際のイベント
        processTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        ListSelectionModel selectionModel = processTable.getSelectionModel();
        selectionModel.addListSelectionListener(new ListSelectionListener() {
            public void valueChanged(ListSelectionEvent e) {
                int row = processTable.getSelectedRow();
                if (row >= 0) {
                    PreviousProcessInfo processInfo = ((ProcessDataModel)processTable.getModel()).getProcessInfo(row);
                    if (processInfo != null) {
                        displayProcessInfo(processInfo);
                    }
                }
            }
        });
    }//GEN-LAST:event_addBtnActionPerformed

    /*
      リスト選択時に情報表示
    */
    public void displayProcessInfo(PreviousProcessInfo ppi) {
        
        initAllUI();
        initBurpUI();
        
        this.requestCombo.setSelectedIndex(ppi.targetParam.paramNumber);
        int resIndex = 0;
        for (Integer number: this.resListInfo.getRequestOrderList()) {
            if (ppi.targetResponseInfo.responseNumber == number) {
                this.responseCombo.setSelectedIndex(resIndex);
            }
            resIndex++;
        }
        
        if (ppi.getProcessType() == PreviousProcessInfo.TYPE_PARAM_INPUT) {
            this.inputRadio.setSelected(true);
            if (this.resInputParamCombo.getItemCount() > 0) {
                int index = ppi.inputParam.paramNumber;
                ReqResParameter resParam = (ReqResParameter)this.resInputParamCombo.getItemAt(index);
                this.resInputParamCombo.setSelectedIndex(index);
            }
        } else if (ppi.getProcessType() == PreviousProcessInfo.TYPE_PARAM_REGEXP) {
            this.regexpRadio.setSelected(true);
            this.resRegexpText.setText(ppi.regexpText);
            this.resRegexpNumText.setText(String.valueOf(ppi.regexpNum));
        } else if (ppi.getProcessType() == PreviousProcessInfo.TYPE_PARAM_LIST) {
            this.ListRadio.setSelected(true);
            this.resListText.setText(ppi.getListString());
        }
        
        this.urlEncodeCheck.setSelected(ppi.isUrlEncode);
        this.charsetForEncode.setSelectedItem(ppi.charsetForUrlEncode);
    }
    
    /*
      saveボタン
    */
    private void saveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveBtnActionPerformed
        this.setVisible(false);
    }//GEN-LAST:event_saveBtnActionPerformed

    private void deleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBtnActionPerformed

        
        
        int[] selectedRows = this.processTable.getSelectedRows();
        for (int i=selectedRows.length-1; i>=0; i--) {
            int row = selectedRows[i];
            ((ProcessDataModel)this.processTable.getModel()).removeRow(row);
            ((ProcessDataModel)this.processTable.getModel()).deleteProcess(row);
        }
        this.processTable.validate();
        this.processTable.repaint();
    }//GEN-LAST:event_deleteBtnActionPerformed

    private void newBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newBtnActionPerformed
        initAllUI();
        initBurpUI();
    }//GEN-LAST:event_newBtnActionPerformed

    private void initBurpUI() {
        // target parameters
        int counter = 0;
        List<ReqResParameter> params = this.targetEntry.getBodyParameters();
        for (int i=0; i<params.size(); i++) {
            ReqResParameter param = params.get(i);
            this.requestCombo.addItem(param);
            counter++;
        }
        List<ReqResParameter> urlPaths = this.targetEntry.getUrlEachPaths(counter);
        for (int i=0; i<urlPaths.size(); i++) {
            ReqResParameter param = urlPaths.get(i);
            this.requestCombo.addItem(param);
            counter++;
        }
        List<ReqResParameter> headerParams = this.targetEntry.getHeaderParameters(counter);
        for (int i=0; i<headerParams.size(); i++) {
            ReqResParameter param = headerParams.get(i);
            this.requestCombo.addItem(param);
            counter++;
        }
        
        // response comobobox
        for (Integer number: this.resListInfo.getRequestOrderList()) {
            ResponseInfo resInfo = this.resListInfo.getParamList(number);
            this.responseCombo.addItem(resInfo);
        }

        this.addWindowListener(this);
    }
    
    /*
      前処理条件を取得
    */
    public List<PreviousProcessInfo> getProcessInfoList() {
        return ((ProcessDataModel)this.processTable.getModel()).getProcessInfoAll();
    }
    
    /*
      レスポンス一覧を受け取り、表示をアップデート
    */
    public void updateUI(ResponseListInfo rli, int row, String cs) {
        this.resListInfo = rli;
        this.rowNum = row;
        this.charset = cs;
        
        this.initAllUI();
        this.initBurpUI();
    }
    
    /*
      初期化
    */
    private void initAllUI() {
        this.requestCombo.removeAllItems();
        this.requestCombo.repaint();
        this.responseCombo.removeAllItems();
        this.responseCombo.repaint();
        this.resRegexpText.setText("");
        this.resRegexpNumText.setText("1");
        this.resListText.setText("");
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton ListRadio;
    private javax.swing.JButton addBtn;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JComboBox charsetForEncode;
    private javax.swing.JButton deleteBtn;
    private javax.swing.JTextField inputPatamValueText;
    private javax.swing.JRadioButton inputRadio;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JSplitPane jSplitPane2;
    private javax.swing.JSplitPane jSplitPane3;
    private javax.swing.JButton newBtn;
    private javax.swing.JTable processTable;
    private javax.swing.JRadioButton regexpRadio;
    private javax.swing.JComboBox requestCombo;
    private javax.swing.JComboBox resInputParamCombo;
    private javax.swing.JTextArea resListText;
    private javax.swing.JTextField resRegexpNumText;
    private javax.swing.JButton resRegexpTestBtn;
    private javax.swing.JTextField resRegexpText;
    private javax.swing.JComboBox responseCombo;
    private javax.swing.JButton saveBtn;
    private javax.swing.JCheckBox urlEncodeCheck;
    // End of variables declaration//GEN-END:variables

    @Override
    public void windowOpened(WindowEvent e) {
    }

    @Override
    public void windowClosing(WindowEvent e) {
    }

    @Override
    public void windowClosed(WindowEvent e) {
    }

    @Override
    public void windowIconified(WindowEvent e) {
    }

    @Override
    public void windowDeiconified(WindowEvent e) {
    }

    @Override
    public void windowActivated(WindowEvent e) {
    }

    @Override
    public void windowDeactivated(WindowEvent e) {
        this.parentTable.closedProcessWindow(this.rowNum);
    }
}


class ProcessDataModel extends DefaultTableModel {
    
    private ArrayList<PreviousProcessInfo> processList = new ArrayList<>();
    private int processCountup = 0;
    
    /*
      コンストラクタ
    */
    public ProcessDataModel(Object[][] data, Object[] columnNames) {
        super(data, columnNames);
    }

    /*
      追加
    */
    public void addProcess(PreviousProcessInfo p) {
        this.addRow(p.getTableModelObject());
        processList.add(p);
        processCountup++;
    }
    
    /*
      削除
    */
    public void deleteProcess(int index) {
        processList.remove(index);
    }
    
    /*
      次の番号
    */
    public int getNextNumber() {
        return this.processCountup;
    }
    
    public PreviousProcessInfo getProcessInfo(int index) {
        return this.processList.get(index);
    }
    
    public List<PreviousProcessInfo> getProcessInfoAll() {
        return this.processList;
    }
}


class PreviousProcessInfo {
    
    static public int TYPE_PARAM_INPUT = 10;
    static public int TYPE_PARAM_REGEXP = 11;
    static public int TYPE_PARAM_LIST = 12;
    
    private BurpExtender parent;
    
    public ResponseInfo targetResponseInfo;
    private int processType;
    public ReqResParameter targetParam;
    public int number;
    
    public ReqResParameter inputParam;
    
    public String regexpText;
    public int regexpNum;
    
    public List<String> paramList;
    
    public Boolean isUrlEncode = false;
    public String charsetForUrlEncode = "utf-8";
    
    private String charset = "utd-8";
    
    /*
      コンストラクタ
    */
    public PreviousProcessInfo(BurpExtender prt, ResponseInfo targetResInfo, int type, ReqResParameter targetParam, int num, String charset) {
        this.parent = prt;
        this.targetResponseInfo = targetResInfo;
        this.processType = type;
        this.targetParam = targetParam;
        this.number = num;
        this.charset = charset;
    }
    
    /*
      指定値を保持
    */
    public Boolean setProcessInfo(Object q1, Object q2) {
        Boolean ret = false;
        
        try {
            if (this.processType == this.TYPE_PARAM_INPUT) {
                this.inputParam = (ReqResParameter)q1;
            } else if (this.processType == this.TYPE_PARAM_REGEXP) {
                this.regexpText = String.valueOf(q1);
                this.regexpNum = Integer.valueOf(String.valueOf(q2));
            } else if (this.processType == this.TYPE_PARAM_LIST) {
                this.paramList= new ArrayList<>(Arrays.asList(String.valueOf(q1).split("[\r\n]+")));
            }
            ret = true;
        } catch (Exception e) {
        }
        
        return ret;
    }
    
    public int getProcessType() {
        return this.processType;
    }
    
    public String getProcessTypeText() {
        if (this.processType == this.TYPE_PARAM_INPUT) {
            return "input";
        } else if (this.processType == this.TYPE_PARAM_REGEXP) {
            return "regexp";
        } else if (this.processType == this.TYPE_PARAM_LIST) {
            return "list";
        } else {
            return "";
        }
    }
    
    public String getListString() {
        StringBuilder sb = new StringBuilder();
        for (String str: paramList) {
            sb.append(str);
            sb.append("\n");
        }
        return sb.toString();
    }
    
    public Object[] getTableModelObject() {
        Object[] rowData = {this.number, this.targetParam.getName(), this.getProcessTypeText(), this.getProcessTypeText()};

        return rowData;
    }
        
    /*
      byte[]をStringに
    */
    public String rebytes2string(BurpExtender locaParent, byte[] resbytes) {
         // 一旦文字コードは無視してパース
        String resHtml = new String(resbytes);
//        Document resdoc = Jsoup.parse(resHtml);
//        charset = resdoc.charset();

        // 改めてパースする
        if (charset != null) {
            try {
                resHtml = new String(resbytes, this.charset);
            } catch (Exception e) {
                locaParent.printErr(e);
            }
        }
        
        return resHtml;
    }
    
    /*
      条件に応じてリクエストを更新する
    */
    public byte[] updateByteRequest(byte[] originalRequest, byte[] sourceResponse) {

        byte [] retBytes = originalRequest;
        
        if (originalRequest != null && sourceResponse != null) {
            if (this.processType == TYPE_PARAM_INPUT) {
                // Bodyを取得
                IResponseInfo resinfo = this.parent.helpers.analyzeResponse(sourceResponse);
                byte[] resbody = Arrays.copyOfRange(sourceResponse, resinfo.getBodyOffset(), sourceResponse.length); 
                
                Document resdoc = Jsoup.parse(rebytes2string(parent, resbody));
                Elements selectored = resdoc.select("input[type=hidden]").select("input[name=" + inputParam.getName() + "]");
                if (selectored.size() > 0) {
                    Element elem = selectored.get(0);
//                    IParameter param = this.parent.helpers.buildParameter(targetParam.getName(), elem.val(), targetParam.getType());
//                    
//                    retBytes = this.parent.helpers.updateParameter(retBytes, param);
                    retBytes = this.updateParameter(retBytes, targetParam, elem.val());
                }
            } else if (this.processType == TYPE_PARAM_REGEXP) {
                String srcResString = rebytes2string(parent, sourceResponse);
                
                String matchedText = "";
                Pattern pat = Pattern.compile(regexpText, Pattern.CASE_INSENSITIVE | Pattern.MULTILINE);
                Matcher mat = pat.matcher(srcResString);
                int placeNum = this.regexpNum;
                while (placeNum > 0) {
                    if (mat.find() == true) {
                        try {
                            matchedText = mat.group(1);
                        } catch (Exception e) {
                            break;
                        }
                    }
                    placeNum--;
                }
                
    //                IParameter param = this.parent.helpers.buildParameter(targetParam.getName(), matchedText, targetParam.getType());
    //                retBytes = this.parent.helpers.updateParameter(retBytes, param);
                retBytes = this.updateParameter(retBytes, targetParam, matchedText);
            }
        }
        
        if (originalRequest != null) {
            if (this.processType == TYPE_PARAM_LIST) {
                if (paramList.size() > 0) {
                    String newLine = paramList.get(0);
                    if (paramList.size() > 1){
                        paramList.remove(0);
                    }
//                    IParameter param = this.parent.helpers.buildParameter(targetParam.getName(), newLine, targetParam.getType());
//                    retBytes = this.parent.helpers.updateParameter(retBytes, param);
                    retBytes = this.updateParameter(retBytes, targetParam, newLine);
                }
            }
        }
        
        return retBytes;
    }
    
    /*
      パラメータを更新
    */
    private byte[] updateParameter(byte[] orgReqBytes, ReqResParameter targetParam, String newValue) {

        byte[] retBytes = orgReqBytes;
try {
        // パラメータをURLエンコードししたりなんだり
        if (this.isUrlEncode == true) {
            newValue = this.urlEncodeString(newValue);
        }
        
        if (targetParam.isPathFlag == true) {
            String target = targetParam.getValue();
            byte[] targetValueBytes = target.getBytes(this.charset);
            String lf = "\n";
            byte[] firstLf = lf.getBytes(this.charset);
            
            // 検索を最初の行のみにするため、まず改行の位置を取得
            int firstLineEnd =  this.parent.helpers.indexOf(orgReqBytes, firstLf, true, 0, orgReqBytes.length);
            // 置換する箇所のIndex
            int targetIndex = this.parent.helpers.indexOf(orgReqBytes, targetValueBytes, true, 0, firstLineEnd - 1);
            
            if (targetIndex > -1) {
                // 配列を3つに分割して置換、結合する感じ
                byte[] leftbytes = Arrays.copyOfRange(orgReqBytes, 0, targetIndex);
                byte[] rightbytes = Arrays.copyOfRange(orgReqBytes, targetIndex + targetValueBytes.length, orgReqBytes.length);

                byte[] replacedBytes = newValue.getBytes(this.charset);
                
                byte[] newReqBytes = new byte[leftbytes.length + replacedBytes.length + rightbytes.length];
                System.arraycopy(leftbytes, 0, newReqBytes, 0, leftbytes.length);
                System.arraycopy(replacedBytes, 0, newReqBytes, leftbytes.length, replacedBytes.length);
                System.arraycopy(rightbytes, 0, newReqBytes, leftbytes.length + replacedBytes.length, rightbytes.length);
                
                retBytes = newReqBytes;
            }
        } else if(targetParam.isHeaderFlag == true) {

            // 対象ヘッダの位置を取得
            String newLine = "\r\n";
            String targetHeaderString = newLine + targetParam.getName() + ":";
            byte[]  targetBytes = targetHeaderString.getBytes(this.charset);
            int startIndex = this.parent.helpers.indexOf(orgReqBytes, targetBytes, true, 0, orgReqBytes.length);
            int lastIndex = this.parent.helpers.indexOf(orgReqBytes, newLine.getBytes(this.charset), true, startIndex + 1, orgReqBytes.length);
            
            if (startIndex > -1 && lastIndex > -1) {
                String newSeparator = ": ";
                byte[] newReqBytes = new byte[startIndex + newLine.getBytes(this.charset).length + 
                        targetParam.getName().getBytes(this.charset).length + newSeparator.getBytes(this.charset).length +
                        newValue.getBytes(this.charset).length + (orgReqBytes.length - lastIndex)];
                int nextStartIndex = 0;
                System.arraycopy(orgReqBytes, 0, newReqBytes, nextStartIndex, startIndex);
                nextStartIndex += startIndex;
                System.arraycopy(newLine.getBytes(this.charset), 0, newReqBytes, nextStartIndex, newLine.getBytes(this.charset).length);
                nextStartIndex += newLine.getBytes(this.charset).length;
                System.arraycopy(targetParam.getName().getBytes(this.charset), 0, newReqBytes, nextStartIndex, targetParam.getName().getBytes(this.charset).length);
                nextStartIndex += targetParam.getName().getBytes(this.charset).length;
                System.arraycopy(newSeparator.getBytes(this.charset), 0, newReqBytes, nextStartIndex, newSeparator.getBytes(this.charset).length);
                nextStartIndex += newSeparator.getBytes(this.charset).length;
                System.arraycopy(newValue.getBytes(this.charset), 0, newReqBytes, nextStartIndex, newValue.getBytes(this.charset).length);
                nextStartIndex += newValue.getBytes(this.charset).length;
                System.arraycopy(orgReqBytes, lastIndex, newReqBytes, nextStartIndex, orgReqBytes.length - lastIndex);

                retBytes = newReqBytes;
            }
        } else {
            IRequestInfo orgReqInfo = this.parent.helpers.analyzeRequest(orgReqBytes);

            // マルチパート形式の場合は独自に組み立てる
            String multiBoundary = this.reqIsMultipart(orgReqBytes);
            if (multiBoundary.length() > 0 && targetParam.isGetParameter() == false) {
                retBytes = this.replaceMultipartParams(orgReqBytes, targetParam, newValue.getBytes(this.charset), multiBoundary.getBytes(this.charset));
            } else {
//                this.parent.printStr("sameindex: " + String.valueOf(targetParam.sameIndex));
                if (targetParam.sameIndex > 1) {
                    retBytes = modifyParamByIndex(orgReqBytes, targetParam.getType(), targetParam.getName(), newValue, targetParam.sameIndex);
                } else {
                    IParameter param = this.parent.helpers.buildParameter(targetParam.getName(), newValue, targetParam.getType());
                    retBytes = this.parent.helpers.updateParameter(orgReqBytes, param);
                }
            }

        }
} catch (Exception e) {
    this.parent.printErr(e);
}        
        return retBytes;
    }
    
    /*
      Bodyパラメータで同じ名前のパラメータがある場合、byte[]を解析してパラメータの一覧を取得。その順番を基にMyParameterを組み立てる
    */
    private byte[] modifyParamByIndex(byte[] request, byte type, String name, String value, int index) {
        byte[] retBytes = request;
        
        IHttpService dummyservice = this.parent.helpers.buildHttpService("localhost", 8080, false);
        IHttpRequestResponse reqres = this.parent.callbacks.makeHttpRequest(dummyservice, request);
        RequestEntry tempReqEntry = new RequestEntry(this.parent, reqres, 99999);
        List<ReqResParameter> tempParams = tempReqEntry.getBodyParameters();
        for (int i=0; i<tempParams.size(); i++) {
            ReqResParameter p = tempParams.get(i);
//                this.parent.printStr("mod sameindex: " + String.valueOf(p.sameIndex) + " : " + p.getValue());
            if (p.getName().equals(name) && p.sameIndex == index) {
//                this.parent.printStr("mod ns: " + String.valueOf(p.getNameStart()));

                String newParam = name + "=" + value;
                byte[] newParamBytes = newParam.getBytes();
                retBytes = new byte[request.length - (p.getValueEnd() - p.getNameStart()) + name.getBytes().length + value.getBytes().length + 1];
                System.arraycopy(request, 0, retBytes, 0, p.getNameStart());
                System.arraycopy(newParamBytes, 0, retBytes, p.getNameStart(), newParamBytes.length);
                System.arraycopy(request, p.getValueEnd(), retBytes, p.getNameStart() + newParamBytes.length, request.length - p.getValueEnd());
            }
        }
        
        return retBytes;
    }
    
    /*
      リクエストがマルチパートかどうか。マルチパートの場合はboundaryを返す
    */
    private String reqIsMultipart(byte[] reqBytes) {
        IRequestInfo reqInfo = this.parent.helpers.analyzeRequest(reqBytes);
        for (String header: reqInfo.getHeaders()) {
            if (header.startsWith("Content-Type") == true) {
                if (header.indexOf("multipart/form-data") > -1) {
                    int boundaryIndex = header.indexOf("boundary=");
                    String boundary = header.substring(boundaryIndex + "boundary=".length(), header.length());
                    
                    return boundary;
                }
            }
        }
        return "";
    }
    
    /*
      マルチパート形式のパラメータ更新
      マルチパートのパラメータ更新がburpではサポートされていないため、独自に実装
    */
    private byte[] replaceMultipartParams(byte[] orgReqBytes, ReqResParameter targetParam, byte[] newValue, byte[] boundary) {

        byte[] newReqBytes = orgReqBytes;
        
        IRequestInfo orgReqInfo = this.parent.helpers.analyzeRequest(orgReqBytes);
        
        ArrayList<byte[]> multiParamsBytes = new ArrayList<>();

        // マルチパートのboundaryから次のboundaryのとこまでのbytesを切り出してリストに格納
        int paramSearchIndex = orgReqInfo.getBodyOffset();
        byte[] lastFooterLine = new byte[0]; // マルチパートパラメータの最後のフッタ
        while (paramSearchIndex > -1) {
            int nextBoundaryIndex = this.parent.helpers.indexOf(orgReqBytes, boundary, true, paramSearchIndex + 1, orgReqBytes.length);
            if (nextBoundaryIndex > paramSearchIndex) {
                byte[] paramBytes = new byte[nextBoundaryIndex - paramSearchIndex];
                System.arraycopy(orgReqBytes, paramSearchIndex, paramBytes, 0, paramBytes.length);
                multiParamsBytes.add(paramBytes);
            }
            
            if (nextBoundaryIndex == -1) {
                lastFooterLine = new byte[orgReqBytes.length - paramSearchIndex];
                System.arraycopy(orgReqBytes, paramSearchIndex, lastFooterLine, 0, lastFooterLine.length);
            }
            
            paramSearchIndex = nextBoundaryIndex;
        }

        // 変更後のリクエストの長さを取得。また、入れ替えるパラメータについてはリストを置換
        int newReqLength = orgReqInfo.getBodyOffset();
        for (int i=0; i<multiParamsBytes.size(); i++) {
            byte[] paramBytes = multiParamsBytes.get(i);
            String nameString = "name=\"" + targetParam.getName() + "\"";
            int nameSearchIndex;
            try {
                nameSearchIndex = this.parent.helpers.indexOf(paramBytes, nameString.getBytes(this.charset), true, 0, paramBytes.length);
            } catch (Exception e) {
                this.parent.printErr(e);
                nameSearchIndex = this.parent.helpers.indexOf(paramBytes, nameString.getBytes(), true, 0, paramBytes.length);
            }
            if (nameSearchIndex > -1) {
                // 入れ替えるパラメータの場合
                byte[] newParamBytes = this.replaceMultipartByteParam(paramBytes, newValue);

                multiParamsBytes.set(i, newParamBytes);
                newReqLength += newParamBytes.length;
            } else {
                newReqLength += paramBytes.length;
//                this.parent.printStr("hello0");
//                this.parent.printStr(new String(paramBytes));
            }
        }

        newReqBytes = new byte[newReqLength + lastFooterLine.length];
        int arrayCopyIndex = 0;

        System.arraycopy(orgReqBytes, 0, newReqBytes, arrayCopyIndex, orgReqInfo.getBodyOffset());
        arrayCopyIndex += orgReqInfo.getBodyOffset();
        for (byte[] paramBytes: multiParamsBytes) {
            System.arraycopy(paramBytes, 0, newReqBytes, arrayCopyIndex, paramBytes.length);
            arrayCopyIndex += paramBytes.length;
        }
        
        System.arraycopy(lastFooterLine, 0, newReqBytes, newReqLength, lastFooterLine.length);
        
        return newReqBytes;
    }
    
    /*
      一つのマルチパートパラメータの値を書き換える
    */
    private byte[] replaceMultipartByteParam(byte[] multiParamByte, byte[] newValue) {
        byte[] endLineByte;
        byte[] boundLineByte;
        try {
            endLineByte = "\r\n--".getBytes(this.charset);
            boundLineByte = "\r\n\r\n".getBytes(this.charset);
        } catch (Exception e) {
            endLineByte = "\r\n--".getBytes();
            boundLineByte = "\r\n\r\n".getBytes();
        }
                
        int valueIndex = this.parent.helpers.indexOf(multiParamByte, boundLineByte, true, 0, multiParamByte.length) + boundLineByte.length;
        
        byte[] retMultiParamBytes = new byte[valueIndex + newValue.length + endLineByte.length];
        System.arraycopy(multiParamByte, 0, retMultiParamBytes, 0, valueIndex);
        System.arraycopy(newValue, 0, retMultiParamBytes, valueIndex, newValue.length);
        System.arraycopy(endLineByte, 0, retMultiParamBytes, valueIndex + newValue.length, endLineByte.length);

        return retMultiParamBytes;
    }
    
    /*
      パラメータをURLエンコードする
    */
    private String urlEncodeString(String orgString) {
        String encodedString = orgString;

        try {
            encodedString = URLEncoder.encode(orgString, this.charsetForUrlEncode);
        } catch (Exception e) {
            this.parent.printErr(e);
        }
        
        return encodedString;
    }
    
}


class MyParameter implements IParameter {

    public byte type;
    public String name;
    public String value;
    public int nameStart = -1;
    public int nameEnd = -1;
    public int valueStart = -1;
    public int valueEnd = -1;
    
    public MyParameter(byte t, String n, String v) {
        this.type = t;
        this.name = n;
        this.value = v;
    }
    
    public MyParameter(byte t, String n, String v, int ns, int ne, int vs, int ve) {
        this.type = t;
        this.name = n;
        this.value = v;
        this.nameStart = ns;
        this.nameEnd = ne;
        this.valueStart = vs;
        this.valueEnd = ve;
    }
    
    @Override
    public byte getType() {
        return this.type;
    }

    @Override
    public String getName() {
        return this.name;
    }

    @Override
    public String getValue() {
        return this.value;
    }

    @Override
    public int getNameStart() {
        return this.nameStart;
    }

    @Override
    public int getNameEnd() {
        return this.nameEnd;
    }

    @Override
    public int getValueStart() {
        return this.valueStart;
    }

    @Override
    public int getValueEnd() {
        return this.valueEnd;
    }
    
}


