/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package burp;

import java.awt.Frame;
import java.awt.event.ComponentEvent;
import java.awt.event.ComponentListener;
import java.awt.event.InputMethodEvent;
import java.awt.event.InputMethodListener;
import java.awt.event.MouseEvent;
import java.net.URL;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JFrame;
import javax.swing.JTable;
import javax.swing.event.MouseInputListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;

/**
 *
 * @author akurosu
 */
public class Reptruder extends javax.swing.JPanel implements ComponentListener {

    private BurpExtender parent;
    
    private ReptruderThreadFrame threadFrame;
    private JFrame reptruderFrame;

    private IMessageEditor requestViewer;
    private IMessageEditor responseViewer;
    
    /**
     * Creates new form Reptruder
     */
    public Reptruder(BurpExtender prt) {
        this.parent = prt;
        
        initComponents();
        createBurpUI();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        baseSplitPane = new javax.swing.JSplitPane();
        leftSplitPane = new javax.swing.JSplitPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        requestTable = new RequestTable();
        reqresShowTab = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        upBtn = new javax.swing.JButton();
        downBtn = new javax.swing.JButton();
        testRunBtn = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        charsetCombo = new javax.swing.JComboBox();
        reverseBtn = new javax.swing.JButton();

        jPanel1.setPreferredSize(new java.awt.Dimension(700, 600));

        baseSplitPane.setDividerLocation(600);
        baseSplitPane.setDividerSize(4);
        baseSplitPane.setMinimumSize(new java.awt.Dimension(504, 500));

        leftSplitPane.setDividerLocation(150);
        leftSplitPane.setDividerSize(4);
        leftSplitPane.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        leftSplitPane.setMinimumSize(new java.awt.Dimension(500, 400));

        requestTable.setModel(new RequestTableModel(
            new Object [][] {},
            new String [] {
                "target", "#", "Protocol", "Host", "Port", "Method", "URL", "accept cookies", "prepare", "skip"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Integer.class, java.lang.Object.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, true, true, true, false, false, true, true, true
            };

            //    public Class getColumnClass(int columnIndex) {
                //        return types [columnIndex];
                //    }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        requestTable.setCellSelectionEnabled(true);
        jScrollPane2.setViewportView(requestTable);
        requestTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);

        leftSplitPane.setTopComponent(jScrollPane2);
        leftSplitPane.setRightComponent(reqresShowTab);

        baseSplitPane.setLeftComponent(leftSplitPane);

        jPanel2.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        jPanel2.setMaximumSize(new java.awt.Dimension(130, 1000));
        jPanel2.setMinimumSize(new java.awt.Dimension(130, 1000));
        jPanel2.setPreferredSize(new java.awt.Dimension(100, 199));

        upBtn.setText("↑");
        upBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                upClicked(evt);
            }
        });

        downBtn.setText("↓");
        downBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                downClicked(evt);
            }
        });

        testRunBtn.setText("test run");
        testRunBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                testRunClicked(evt);
            }
        });

        jButton1.setText("delete");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                deleteSelection(evt);
            }
        });

        charsetCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "utf-8", "shift_jis", "euc_jp", "ISO2022JP", "Windows-31" }));
        charsetCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                charsetComboActionPerformed(evt);
            }
        });

        reverseBtn.setText("↑↓");
        reverseBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reverseBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jButton1))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(downBtn, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(upBtn, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(testRunBtn, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(reverseBtn, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(charsetCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(upBtn)
                .addGap(4, 4, 4)
                .addComponent(reverseBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(downBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(charsetCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33)
                .addComponent(testRunBtn)
                .addContainerGap(733, Short.MAX_VALUE))
        );

        baseSplitPane.setRightComponent(jPanel2);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(baseSplitPane, javax.swing.GroupLayout.DEFAULT_SIZE, 640, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(baseSplitPane, javax.swing.GroupLayout.DEFAULT_SIZE, 598, Short.MAX_VALUE)
                .addGap(2, 2, 2))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 640, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    /*
      リクエストアップ
    */
    private void upClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_upClicked
        RequestTableModel tableModel = (RequestTableModel)requestTable.getModel();
                
        int selectedRow = requestTable.getSelectedRow();
        int afterRow = tableModel.upRequest(selectedRow);
        requestTable.setRowSelectionInterval(afterRow, afterRow);
    }//GEN-LAST:event_upClicked
    /*
      リクエストダウン
    */
    private void downClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_downClicked
        RequestTableModel tableModel = (RequestTableModel)requestTable.getModel();
                
        int selectedRow = requestTable.getSelectedRow();
        int afterRow = tableModel.downRequest(selectedRow);
        requestTable.setRowSelectionInterval(afterRow, afterRow);
    }//GEN-LAST:event_downClicked
    
    /*
      テスト実行
    */
    private void testRunClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_testRunClicked

        this.threadFrame = null;
        this.reptruderFrame = null;
      
        ArrayList<RequestEntry> reqlist = this.makeRequestList();

        this.reptruderFrame = new JFrame("Reptruder");
        
        this.threadFrame = new ReptruderThreadFrame(this.parent, reqlist);
        
        this.reptruderFrame.setSize(900, 700);
        this.reptruderFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        this.reptruderFrame.add(this.threadFrame);
        
        this.threadFrame.start();
    
        this.reptruderFrame.setVisible(true);
    }//GEN-LAST:event_testRunClicked

    /*
      リクエスト削除
    */
    private void deleteSelection(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deleteSelection
        
        int[] selectedRows = requestTable.getSelectedRows();
        for (int i=selectedRows.length-1; i>=0; i--) {
            int row = selectedRows[i];
            ((RequestTableModel)requestTable.getModel()).deleteRequestByRow(row);
            ((RequestTableModel)requestTable.getModel()).removeRow(row);
        }
        
        requestViewer.setMessage(new byte[0], true);
        responseViewer.setMessage(new byte[0], true);
        
        requestTable.validate();
        requestTable.repaint();
    }//GEN-LAST:event_deleteSelection

    private void charsetComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_charsetComboActionPerformed
        String cs = (String)this.charsetCombo.getSelectedItem();
        ((RequestTable)requestTable).setCharset(cs);
    }//GEN-LAST:event_charsetComboActionPerformed

    private void reverseBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reverseBtnActionPerformed
        RequestTableModel tableModel = (RequestTableModel)requestTable.getModel();

        tableModel.reverseRequest();
    }//GEN-LAST:event_reverseBtnActionPerformed

    private void createBurpUI() {
        
        // 左Paneへのコンポーネント配置
        requestViewer = this.parent.callbacks.createMessageEditor(null, true);
        responseViewer = this.parent.callbacks.createMessageEditor(null, false);
        reqresShowTab.addTab("Request", requestViewer.getComponent());
        reqresShowTab.addTab("Response", responseViewer.getComponent());
        
        // Tableを行選択にする
        this.requestTable.setCellSelectionEnabled(false);
        this.requestTable.setRowSelectionAllowed(true);
        
        // テーブルにviewerをセット
        String charset = (String)this.charsetCombo.getSelectedItem();
        ((RequestTable)requestTable).init(requestViewer, responseViewer, charset);
        ((RequestTable)requestTable).parent = this.parent;
        
        // 前処理条件設定モーダル表示用
        ((RequestTable)requestTable).baseFrame = (Frame)this.getParent();
    }
    
    /*
      リクエストを追加
    */
    public void addRequest(IHttpRequestResponse reqres) {
        
        // 表に挿入
        RequestTableModel tableModel = (RequestTableModel)requestTable.getModel();

        RequestEntry reqEntry = new RequestEntry(this.parent, reqres, tableModel.getNextRequestNum());
        
        tableModel.addRequest(reqEntry);
    }

    /*
      テスト実施用リクエスト作成
    */
    public ArrayList<RequestEntry> makeRequestList() {
        
        // Viewerの情報を保持
        ((RequestTable)requestTable).saveViewerData();
        
        // テーブルの情報を保持
        ((RequestTable)requestTable).saveTableData();
        
        ArrayList<RequestEntry> reqlist = new ArrayList<>();
        
        for (int row=0; row < requestTable.getRowCount(); row++) {
            RequestTableModel tableModel = (RequestTableModel)requestTable.getModel();
            int number = (int)tableModel.getValueAt(row, 1);
            RequestEntry entry = tableModel.getRequestByRow(row);
            
            reqlist.add(entry);
        }
        
        return reqlist;
    }
    
    public void testmethod(IHttpRequestResponse reqres) {
//        requestViewer.setMessage(reqres.getRequest(), true);
//        if (reqres.getResponse() != null) {
//            responseViewer.setMessage(reqres.getResponse(), true);
//        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSplitPane baseSplitPane;
    private javax.swing.JComboBox charsetCombo;
    private javax.swing.JButton downBtn;
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSplitPane leftSplitPane;
    private javax.swing.JTabbedPane reqresShowTab;
    private javax.swing.JTable requestTable;
    private javax.swing.JButton reverseBtn;
    private javax.swing.JButton testRunBtn;
    private javax.swing.JButton upBtn;
    // End of variables declaration//GEN-END:variables

    @Override
    public void componentResized(ComponentEvent e) {
        int loc = this.baseSplitPane.getMaximumDividerLocation();
        this.baseSplitPane.setDividerLocation(loc);
    }
    
    @Override
    public void componentMoved(ComponentEvent e) {
    }

    @Override
    public void componentShown(ComponentEvent e) {
    }

    @Override
    public void componentHidden(ComponentEvent e) {
    }

}

/*
  リクエスト表示テーブル
*/
class RequestTable extends JTable{
    
    private int showedNumber;
    private IMessageEditor requestViewer;
    private IMessageEditor responseViewer;
    
    public BurpExtender parent;
    
    public Frame baseFrame;
    
    private String charset = "utf-8";

    /*
      ビューアーをセット
    */
    public void init(IMessageEditor reqv, IMessageEditor resv, String cs) {
        this.showedNumber = -1;
        this.requestViewer = reqv;
        this.responseViewer = resv;
        
        this.charset = cs;
    }
    
    public void setCharset(String cs) {
        this.charset = cs;
    }
    /*
      Viewerのデータを保持。変更されてるかもしれないので。
    */
    public void saveViewerData() {
        
        RequestTableModel tableModel = (RequestTableModel)this.getModel();
        if (this.requestViewer.getMessage() != null) {
            RequestEntry oldEntry = tableModel.getRequestByNumber(this.showedNumber);
            if (oldEntry != null) {
                oldEntry.setRequestBytes(this.requestViewer.getMessage());
            }
        }
    }
    
    /*
      テーブルの情報を保持
    */
    public void saveTableData() {
        RequestTableModel tableModel = (RequestTableModel)this.getModel();
        
        ArrayList<Object[]> tableDataList = new ArrayList<>();
        
        for (int i=0; i<tableModel.getRowCount(); i++) {
            Object[] rowData = this.getRowData(i);
            
            RequestEntry entry = tableModel.getRequestByRow(i);
            entry.setTableObject(rowData);
        }
    }
    
    /*
      行情報を取得
    */
    private Object[] getRowData(int row) {
        
        RequestTableModel tableModel = (RequestTableModel)this.getModel();
        
        Object[] rowData = new Object[tableModel.getColumnCount()];
        for (int j=0; j<tableModel.getColumnCount(); j++) {
            rowData[j] = tableModel.getValueAt(row, j);
        }
        
        return rowData;
    }
    
    /*
      ログを選択した際の処理
    */
    @Override
    public void changeSelection(int row, int col, boolean toggle, boolean extend) {

        // Viewerにリクエスト情報を表示
        RequestTableModel tableModel = (RequestTableModel)this.getModel();
        RequestEntry entry = tableModel.getRequestByRow(row);

        // Viewerの変更を保持
        this.saveViewerData();
    
        // Viewerに反映
        IHttpRequestResponse reqres = entry.getRequestResponse();
        this.showedNumber = entry.getNumber();
        if (entry.getRequest() != null) {
            this.requestViewer.setMessage(entry.getRequest(), true);
        } else {
            this.requestViewer.setMessage(new byte[0], true);
        }
        if (reqres.getResponse() != null) {
            this.responseViewer.setMessage(reqres.getResponse(), false);
        } else {
            this.responseViewer.setMessage(new byte[0], false);
        }

        // チェックされた時用
        if (col == 0 || col == 7 || col == 8 || col == 9) {
            Object[] rowData = this.getRowData(row);
            int checked = entry.whichCheckedOnChangeSelection(col, rowData);

            if (checked == RequestEntry.PREPARE_CHECK) {
                // 前処理の設定
                ResponseListInfo resinfo = new ResponseListInfo(this.parent, (RequestTableModel)this.getModel(), this.charset);
                
                if (entry.pp == null) {
                    PreviousProcess pp = new PreviousProcess(this, true, this.parent, entry, resinfo, row, this.charset);
                    entry.pp = pp;
                } else {
                    entry.pp.updateUI(resinfo, row, this.charset);
                }
                entry.pp.setVisible(true);
                
            }

//            if (checked == RequestEntry.PREPARE_CHECK) {
//                this.parent.printStr("checked prepare");
//          } else if (checked == RequestEntry.PREPARE_NOCHECK) {
//                this.parent.printStr("no cheked prepare");
//            } else if (checked == RequestEntry.COOKIE_CHECK) {
//                this.parent.printStr("cheked cookie");
//            } else if (checked == RequestEntry.COOKIE_NOCHECK) {
//                this.parent.printStr("no cheked cookie");
//            } else if (checked == RequestEntry.TARGET_CHECK) {
//                this.parent.printStr("cheked target");
//            } else if (checked == RequestEntry.TARGET_NOCHECK) {
//                this.parent.printStr("no cheked target");
//            }
        }
        
        super.changeSelection(row, col, toggle, extend);
    }
    
    /*
      前処理条件のWindowを閉じた時の処理
    */
    public void closedProcessWindow(int row) {
        ((RequestTableModel)this.getModel()).setValueAt(true, row, 8);
        
    }
}

    
/*
  リクエストTableのDataModel
*/
class RequestTableModel extends DefaultTableModel {
    
    private HashMap<Integer, RequestEntry> requestList = new HashMap<>();
    private int requestCountup = 0;

    /*
      コンストラクタ
    */
    public RequestTableModel(Object[][] data, Object[] columnNames) {
        super(data, columnNames);
    }

    /*
      リクエスト追加
    */
    public void addRequest(RequestEntry entry) {
        this.addRow(entry.getTableModelObject());
        requestList.put(entry.getNumber(), entry);
        requestCountup++;
    }
    
    /*
      リクエスト一覧のNoの最大値を取得
    */
    public int getNextRequestNum() {
        return requestCountup;
    }
    
    /*
      リクエストを一つ上げる
    */
    public int upRequest(int rownum) {
        int afterRownum = rownum;
        if (rownum > 0) {
            this.moveRow(rownum, rownum, rownum - 1);
            afterRownum = rownum - 1;
        }
        return afterRownum;
    }
    
    /*
      リクエストを一つ下げる
    */
    public int downRequest(int rownum) {
        int afterRownum = rownum;
        if (rownum < this.getRowCount() - 1) {
            this.moveRow(rownum, rownum, rownum + 1);
            afterRownum = rownum + 1;
        }
        return afterRownum;
    }
    
    /*
      逆順にする
    */
    public void reverseRequest() {
        int lastrow = this.getRowCount() - 1;
        for (int i=0; i<this.getRowCount(); i++) {
            this.moveRow(lastrow, lastrow, i);
        }
    }
    
    /*
      rowからRequestEntryを取得
    */
    public RequestEntry getRequestByRow(int row) {
        int number = (int)this.getValueAt(row, 1);
        
        return this.getRequestByNumber(number);
    }
    
    /*
      NumberからRequestEntryを取得
    */
    public RequestEntry getRequestByNumber(int number) {
        RequestEntry entry = requestList.get(number);
        
        return entry;
    }
    
    /*
      rowからRequestEntryを削除
    */
    public void deleteRequestByRow(int row) {
        int number = (int)this.getValueAt(row, 1);
        
        requestList.remove(number);
    }
    
    public HashMap<Integer, RequestEntry> getRequestList() {
        return this.requestList;
    }
    
    @Override
    public Class getColumnClass(int col){
        return getValueAt(0, col).getClass();
    }
    
    @Override
    public void setValueAt(Object val, int row, int col) {
        super.setValueAt(val, row, col);
        this.fireTableCellUpdated(row, col);
    }
}


/*
  リクエストを表すクラス
*/
class RequestEntry {
    
    public static int NOCHECK = 0;
    public static int TARGET_CHECK = 11;
    public static int TARGET_NOCHECK = 12;
    public static int COOKIE_CHECK = 21;
    public static int COOKIE_NOCHECK = 22;
    public static int PREPARE_CHECK = 31;
    public static int PREPARE_NOCHECK = 32;
    public static int SKIP_CHECK = 41;
    public static int SKIP_NOCHECK = 42;
    
    
    private BurpExtender parent;
    private IHttpRequestResponse reqres;
    
    public Boolean isTarget = false;
    private int number;
    private URL url;
    private String protocol;
    private String host;
    private int port;
    private String method;
    private String path;
    private Boolean acceptCookies;
    private Boolean prepare;
    private Boolean skip;
    
    private byte[] requestBytes;
    private byte[] threadRequestBytes;
    
    public PreviousProcess pp;
    public ArrayList<PreviousProcessInfo> processList = new ArrayList<>();
    
    public RequestEntry(BurpExtender prt, IHttpRequestResponse reqres, int rowcount) {
        
        this.parent = prt;
        this.reqres = reqres;
        
        IRequestInfo reqInfo = this.parent.helpers.analyzeRequest(reqres);

        // 行番号
        this.number = rowcount;
        // Protocol, Host, Port
        this.url = reqInfo.getUrl();
        this.protocol = url.getProtocol();
        this.host = url.getHost();
        this.port = url.getPort();
        // Method
        this.method = reqInfo.getMethod();
        // path
        this.path = url.getPath();
        // accept cookies
        this.acceptCookies = true;
        // prepare
        this.prepare = false;
        // skip
        this.skip = false;
        
        this.requestBytes = reqres.getRequest();
    }
    
    /*
      TableModelにAddするオブジェクトを返す
    */
    public Object[] getTableModelObject() {
        Object[] rowData =    {
                                this.isTarget,
                                this.number,
                                this.protocol,
                                this.host,
                                this.port,
                                this.method,
                                this.path,
                                this.acceptCookies,
                                this.prepare,
                                this.skip
                            };
        
        return rowData;
    }
    
    /*
      データ更新
    */
    public void setTableObject(Object[] rowData) {
        this.isTarget = (Boolean)rowData[0];
        this.protocol = (String)rowData[2];
        this.host = (String)rowData[3];
        this.port = (int)rowData[4];
        this.acceptCookies = (Boolean)rowData[7];
        this.prepare = (Boolean)rowData[8];
        this.skip = (Boolean)rowData[9];
        
        IHttpService serv = this.parent.helpers.buildHttpService(this.host, this.port, this.protocol);
        
        IRequestInfo reqInfo = this.parent.helpers.analyzeRequest(serv, this.getRequest());
        URL urlData = reqInfo.getUrl();
        this.method =reqInfo.getMethod();
        this.path = urlData.getPath();
    }
    
    /*
      チェックされたか確認
    */
    public int whichCheckedOnChangeSelection(int col, Object[] rowData) {

        // ちょっと面倒で変な処理になってる。CellにButtonを配置するようにした方が良いと思う。
        // target
        if (col == 0 && this.isTarget == rowData[0]) {
            this.isTarget = !this.isTarget;
            if (this.isTarget == true)
                return TARGET_CHECK;
            else
                return TARGET_NOCHECK;
        }
        
        // cookie
        if (col == 7 && this.acceptCookies == rowData[7]) {
            this.acceptCookies = !this.acceptCookies;
            if (this.acceptCookies == true)
                return COOKIE_CHECK;
            else
                return COOKIE_NOCHECK;
        }
        
        // prepare
        if (col == 8 && this.prepare == rowData[8]) {
            this.prepare = !this.prepare;
            if (this.prepare == true)
                return PREPARE_CHECK;
            else
                return PREPARE_NOCHECK;
        }
        
        // skip
        if (col == 9 && this.skip == rowData[9]) {
            this.skip = !this.skip;
            if (this.skip == true) 
                return SKIP_CHECK;
            else
                return SKIP_NOCHECK;
        }
        
        return NOCHECK;
    }
    
    /*
      CookieをUpdate
    */
    public void updateCookies(List<ICookie> cookies) {
        for (ICookie cookie: cookies) {
            IParameter newParam = this.parent.helpers.buildParameter(cookie.getName(), cookie.getValue(), IParameter.PARAM_COOKIE);
            
            this.threadRequestBytes = this.parent.helpers.updateParameter(this.threadRequestBytes, newParam);
        }
    }
    
    /*
      パラメータをアップデート
    */
    public void updateParameter(PreviousProcessInfo ppi, byte[] sourceResponse) {
        threadRequestBytes = ppi.updateByteRequest(threadRequestBytes, sourceResponse);
    }
    
    /*
      リクエストをアップデート
    */
    public void updateRequestBytes(byte[] reqBytes) {
        threadRequestBytes = reqBytes;
    }
    
    public void setRequestBytes(byte[] reqbytes) {
        this.requestBytes = reqbytes;
    }
    
    public byte[] getRequest() {
        return this.requestBytes;
    }
    
    public byte[] getThreadRequest() {
        return this.threadRequestBytes;
    }
    
    public URL getURL() {
        URL retURL = null;
        try {
            retURL = new URL(this.protocol, this.host, this.port, this.path);
        } catch (Exception e) {
        
        }
        return retURL;
    }
    
    /*
      スレッド実行する際の初期化用
    */
    public void initForThread() {
        this.threadRequestBytes = Arrays.copyOfRange(this.getRequest(), 0, this.requestBytes.length); 
    }
    
    public IHttpService getHttpService() {
        IHttpService serv = null;

        try {
            serv = this.parent.helpers.buildHttpService(host, port, protocol);
        } catch (Exception e) {
            this.parent.printErr(e);
        }
        
        return serv;
    }
    
    public IHttpRequestResponse getRequestResponse() {
        return this.reqres;
    }
    
    public List<ReqResParameter> getBodyParameters() {
        int counter = 0;
        HashMap<String, Integer> sameParamHash = new HashMap<>();
        ArrayList<ReqResParameter> params = new ArrayList<>();
        for (IParameter param: this.parent.helpers.analyzeRequest(this.getRequest()).getParameters()) {
            if (param.getType() == IParameter.PARAM_BODY ||
                    param.getType() == IParameter.PARAM_URL) {
                ReqResParameter reqresParam = new ReqResParameter(param, this.getNumber(), counter++);
                
                // 同じ名前のパラメータがあれば順番で覚えとく
                if (sameParamHash.containsKey(param.getName()) == true) {
                    int c = sameParamHash.get(param.getName());
                    reqresParam.sameIndex = ++c;
                    sameParamHash.put(param.getName(), c);
                } else {
                    reqresParam.sameIndex = 1;
                    sameParamHash.put(param.getName(), 1);
                }
                
                params.add(reqresParam);
            }
        }
        return params;
    }
    
    public List<ReqResParameter> getUrlEachPaths(int counter) {
        IRequestInfo reqinfo = this.parent.helpers.analyzeRequest(this.getHttpService(), this.getRequest());
        URL url = reqinfo.getUrl();
        String path = url.getPath();
        
        ArrayList<ReqResParameter> params = new ArrayList<>();
        for (String d: path.split("/")) {
            if (d.length() > 0) {
                IParameter tempParam = this.parent.helpers.buildParameter(d, d, IParameter.PARAM_URL);
                ReqResParameter pathParam = new ReqResParameter(tempParam, this.getNumber(), counter++);
                pathParam.isPathFlag = true;
                params.add(pathParam);
            }
        }
        return params;
    }
    
    public List<ReqResParameter> getHeaderParameters(int counter) {
        IRequestInfo reqinfo = this.parent.helpers.analyzeRequest(this.getHttpService(), this.getRequest());
        
        ArrayList<ReqResParameter> params = new ArrayList<>();
        for (int i=1; i<reqinfo.getHeaders().size(); i++) {
            String h = reqinfo.getHeaders().get(i);
            String[] kv = h.split(":", 2);
            if (kv.length == 2) {
                String headkey = kv[0].trim();
                String headval = kv[1];
                
                IParameter tempParam = this.parent.helpers.buildParameter(headkey, headval, IParameter.PARAM_COOKIE);
                ReqResParameter headerParam = new ReqResParameter(tempParam, this.getNumber(), counter++);
                headerParam.isHeaderFlag = true;
                params.add(headerParam);
            }
        }
        return params;
    }
    
    public Boolean getAcceptCookies() {
        return this.acceptCookies;
    }
    
    public Boolean getPrepare() {
        return this.prepare;
    }
    
    public int getNumber() {
        return this.number;
    }
    
    public boolean isSkip() {
        return this.skip;
    }
}


/*
  前処理用のレスポンス情報
*/
class ResponseListInfo {
    
    private BurpExtender parent;
    
    private HashMap<Integer, ResponseInfo> responseInfoHash;
    private ArrayList<Integer> numberList;
    
    private String charset = "utf-8";
    
    /*
      コンストラクタ
    */
    public ResponseListInfo(BurpExtender prt, RequestTableModel reqlist, String cs) {
        this.parent = prt;
        
        if (cs != null && cs.length() > 0) {
            this.charset = cs;
        }
        
        this.analyzeResponses(reqlist);
    }
    
    /*
      byte[]をStringに
    */
    public String rebytes2string(BurpExtender locaParent, byte[] resbytes) {
//         一旦文字コードは無視してパース
        String resHtml = new String(resbytes);
//        Document resdoc = Jsoup.parse(resHtml);
//        Charset charset = resdoc.charset();

        // 改めてパースする
//        if (charset != null) {
            try {
                resHtml = new String(resbytes, this.charset);
            } catch (Exception e) {
                locaParent.printErr(e);
            }
//        }
        
        return resHtml;
    }
        /*
      byte[]をStringに
    */
    static public String rebytes2string(BurpExtender locaParent, byte[] resbytes, String cs) {

        String resHtml = new String(resbytes);
        try {
            resHtml = new String(resbytes, cs);
        } catch (Exception e) {
            locaParent.printErr(e);
        }
        
        return resHtml;
    }
    
    /*
      解析
    */
    public HashMap<Integer, ResponseInfo>  analyzeResponses(RequestTableModel reqTableModel) {
        
        this.responseInfoHash = new HashMap<Integer, ResponseInfo>();
        this.numberList = new ArrayList<>();
        
        for (int i=0; i<reqTableModel.getRowCount(); i++) {
            RequestEntry reqEntry = reqTableModel.getRequestByRow(i);
            
            ArrayList<ReqResParameter> resParamList = new ArrayList<>();
            
            // Bodyを取得
            byte[] resbytes = reqEntry.getRequestResponse().getResponse();
            IResponseInfo resinfo = this.parent.helpers.analyzeResponse(resbytes);
            byte[] resbody = Arrays.copyOfRange(resbytes, resinfo.getBodyOffset(), resbytes.length); 
            
            Document resdoc = Jsoup.parse(this.rebytes2string(this.parent, resbytes));
            
            // inputタグのhiddenパラメータが対象
            int counter = 0;
            Elements selectored = resdoc.select("input[type=hidden]");
            for (Element hiddenElem: selectored) {
                String hiddenName = hiddenElem.attr("name");
                String hiddenVal = hiddenElem.val();
                
                if (hiddenName != null && hiddenName.length() > 0) {
                    IParameter param = this.parent.helpers.buildParameter(hiddenName, hiddenVal, IParameter.PARAM_BODY);
                    ReqResParameter resParam = new ReqResParameter(param, reqEntry.getNumber(), counter++);
                    resParamList.add(resParam);
                }
            }
            
            ResponseInfo responseInfo = new ResponseInfo(reqEntry.getRequestResponse().getResponse(), resParamList, reqEntry.getNumber());
            responseInfoHash.put(reqEntry.getNumber(), responseInfo);
            numberList.add(reqEntry.getNumber());
        }
        
        return responseInfoHash;
    }
    
    public ResponseInfo getParamList(Integer i) {
        return this.responseInfoHash.get(i);
    }
    
    public ArrayList<Integer> getRequestOrderList() {
        return this.numberList;
    }
}

/*
  レスポンスの前処理用クラス
*/
class ResponseInfo {
    
    public byte[] responseBytes;
    private ArrayList<ReqResParameter> responseParamList;
    public int responseNumber;
    
    public ResponseInfo(byte[] resbytes, ArrayList<ReqResParameter> responseParamList, int responseNumber) {
        this.responseBytes = resbytes;
        this.responseParamList = responseParamList;
        this.responseNumber = responseNumber;
    }
    
    public ArrayList<ReqResParameter> getresponseParamList() {
        return this.responseParamList;
    }
    
    @Override
    public String toString() {
        return "#" + String.valueOf(this.responseNumber);
    }
}

/*
  独自Parameterクラス
*/
class ReqResParameter implements IParameter {
    
    private IParameter parameterInfo;
    private int requestNumber;
    public int paramNumber;
    public Boolean isPathFlag = false;
    public Boolean isHeaderFlag = false;
    public int sameIndex = 0;
    
    public ReqResParameter(IParameter param, int reqNumber, int paramNumber) {
        this.parameterInfo = param;
        this.requestNumber = reqNumber;
        this.paramNumber = paramNumber;
    }
    
    public int getRequestNumber() {
        return this.requestNumber;
    }
    
    public Boolean isGetParameter() {
        if (this.getType() == IParameter.PARAM_URL) {
            return true;
        }
        return false;
    }

    @Override
    public String toString() {
        String str = String.valueOf(this.paramNumber) + ":";
        switch(this.getType()) {
            case IParameter.PARAM_BODY:
                str += "P";
                break;
            case IParameter.PARAM_URL:
                if (this.isPathFlag == true) {
                    str += "U";
                } else {
                    str += "G";
                }
                break;
            case IParameter.PARAM_COOKIE:
                if(this.isHeaderFlag == true) {
                    str += "H";
                    break;
                }
            default:
                str += "O";
        }
        str += ":" + this.getName();
        
        return str;
    }
    
    @Override
    public byte getType() {
        return parameterInfo.getType();
    }

    @Override
    public String getName() {
        return parameterInfo.getName();
    }

    @Override
    public String getValue() {
        return parameterInfo.getValue();
    }

    @Override
    public int getNameStart() {
        return parameterInfo.getNameStart();
    }

    @Override
    public int getNameEnd() {
        return parameterInfo.getNameEnd();
    }

    @Override
    public int getValueStart() {
        return parameterInfo.getValueStart();
    }

    @Override
    public int getValueEnd() {
        return parameterInfo.getValueEnd();
    }
    
}
